#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

DATE="${1:-$(date +%F)}"
USER="$(gh api user --jq .login)"

mapfile -t COMMITS < <(
  gh search commits \
       --author "$USER" --author-date "$DATE" --limit 100 \
       --json repository,sha \
       --jq '.[]|"\(.repository.fullName) \(.sha)"'
)

if (( ${#COMMITS[@]} == 0 )); then
  printf '❌ Nenhum commit encontrado para %s\n' "$DATE" >&2
  exit 1
fi

STATS=$(
  printf '%s\n' "${COMMITS[@]}" |
  xargs -n2 -P"$(nproc)" bash -c '
      repo=$1 sha=$2
      resp=$(gh api "repos/$repo/commits/$sha") || exit 0
      adds=$(jq .stats.additions  <<<"$resp")
      dels=$(jq .stats.deletions  <<<"$resp")
      chars=$(jq -r .files[].patch<<<"$resp" |
              grep -E "^[+-][^+-]" |
              sed "s/^[+-]//" | wc -m)
      echo $((adds+dels)) $chars
  ' _
)

IFS=' ' read -r COMMIT_N LINES_N CHARS_N < <(
  awk '{c++; l+=$1; m+=$2} END{print c,l,m}' <<<"$STATS"
)

rows=(
  "Commits       $COMMIT_N"
  "Linhas totais $LINES_N"
  "Caracteres    $CHARS_N"
)

max=0; for r in "${rows[@]}"; do (( ${#r}>max ))&&max=${#r}; done
W=$((max+4)); border=$(printf '═%.0s' $(seq 1 $W))
title=" Resumo de $DATE "
pl=$(( (W-${#title})/2 )); pr=$(( W-pl-${#title} ))

echo
printf "╔%s╗\n" "$border"
printf "║%*s%s%*s║\n"  $pl '' "$title" $pr ''
printf "╠%s╣\n" "${border//═/─}"
for r in "${rows[@]}"; do
  pl=$(( (W-${#r})/2 )); pr=$(( W-pl-${#r} ))
  printf "║%*s%s%*s║\n" $pl '' "$r" $pr ''
done
printf "╚%s╝\n" "$border"
